{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30b891c2-86d7-4b9e-abe0-e14d7e984e1c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe08262b-0f54-454a-94bb-d915177b1313",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----Welcome to Battleships-----\n",
      "You have 50 bullets to take down 8 ships, may the battle begin!\n",
      "A) . . . . . . . . . . \n",
      "B) . . . . . . . . . . \n",
      "C) . . . . . . . . . . \n",
      "D) . . . . . . . . . . \n",
      "E) . . . . . . . . . . \n",
      "F) . . . . . . . . . . \n",
      "G) . . . . . . . . . . \n",
      "H) . . . . . . . . . . \n",
      "I) . . . . . . . . . . \n",
      "J) . . . . . . . . . . \n",
      "   0 1 2 3 4 5 6 7 8 9 \n",
      "Number of ships remaining: 5\n",
      "Number of bullets left: 50\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter row (A-J) and column (0-9) such as A3:  a7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "----------------------------\n",
      "You missed, no ship was shot\n",
      "----------------------------\n",
      "\n",
      "A) . . . . . . . # . . \n",
      "B) . . . . . . . . . . \n",
      "C) . . . . . . . . . . \n",
      "D) . . . . . . . . . . \n",
      "E) . . . . . . . . . . \n",
      "F) . . . . . . . . . . \n",
      "G) . . . . . . . . . . \n",
      "H) . . . . . . . . . . \n",
      "I) . . . . . . . . . . \n",
      "J) . . . . . . . . . . \n",
      "   0 1 2 3 4 5 6 7 8 9 \n",
      "Number of ships remaining: 5\n",
      "Number of bullets left: 49\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter row (A-J) and column (0-9) such as A3:  j9\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "----------------------------\n",
      "You missed, no ship was shot\n",
      "----------------------------\n",
      "\n",
      "A) . . . . . . . # . . \n",
      "B) . . . . . . . . . . \n",
      "C) . . . . . . . . . . \n",
      "D) . . . . . . . . . . \n",
      "E) . . . . . . . . . . \n",
      "F) . . . . . . . . . . \n",
      "G) . . . . . . . . . . \n",
      "H) . . . . . . . . . . \n",
      "I) . . . . . . . . . . \n",
      "J) . . . . . . . . . # \n",
      "   0 1 2 3 4 5 6 7 8 9 \n",
      "Number of ships remaining: 5\n",
      "Number of bullets left: 48\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "import time\n",
    " \n",
    "# Global variable for grid\n",
    "grid = [[]]\n",
    "# Global variable for grid size\n",
    "grid_size = 10\n",
    "# Global variable for number of ships to place\n",
    "num_of_ships = 5\n",
    "# Global variable for bullets left\n",
    "bullets_left = 50\n",
    "# Global variable for game over\n",
    "game_over = False\n",
    "# Global variable for number of ships sunk\n",
    "num_of_ships_sunk = 0\n",
    "# Global variable for ship positions\n",
    "ship_positions = [[]]\n",
    "# Global variable for alphabet\n",
    "alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n",
    " \n",
    " \n",
    "def validate_grid_and_place_ship(start_row, end_row, start_col, end_col):\n",
    "    \"\"\"Will check the row or column to see if it is safe to place a ship there\"\"\"\n",
    "    global grid\n",
    "    global ship_positions\n",
    " \n",
    "    all_valid = True\n",
    "    for r in range(start_row, end_row):\n",
    "        for c in range(start_col, end_col):\n",
    "            if grid[r][c] != \".\":\n",
    "                all_valid = False\n",
    "                break\n",
    "    if all_valid:\n",
    "        ship_positions.append([start_row, end_row, start_col, end_col])\n",
    "        for r in range(start_row, end_row):\n",
    "            for c in range(start_col, end_col):\n",
    "                grid[r][c] = \"O\"\n",
    "    return all_valid\n",
    " \n",
    " \n",
    "def try_to_place_ship_on_grid(row, col, direction, length):\n",
    "    \"\"\"Based on direction will call helper method to try and place a ship on the grid\"\"\"\n",
    "    global grid_size\n",
    " \n",
    "    start_row, end_row, start_col, end_col = row, row + 1, col, col + 1\n",
    "    if direction == \"left\":\n",
    "        if col - length < 0:\n",
    "            return False\n",
    "        start_col = col - length + 1\n",
    " \n",
    "    elif direction == \"right\":\n",
    "        if col + length >= grid_size:\n",
    "            return False\n",
    "        end_col = col + length\n",
    " \n",
    "    elif direction == \"up\":\n",
    "        if row - length < 0:\n",
    "            return False\n",
    "        start_row = row - length + 1\n",
    " \n",
    "    elif direction == \"down\":\n",
    "        if row + length >= grid_size:\n",
    "            return False\n",
    "        end_row = row + length\n",
    " \n",
    "    return validate_grid_and_place_ship(start_row, end_row, start_col, end_col)\n",
    " \n",
    " \n",
    "def create_grid():\n",
    "    \"\"\"Will create a 10x10 grid and randomly place down ships\n",
    "       of different sizes in different directions\"\"\"\n",
    "    global grid\n",
    "    global grid_size\n",
    "    global num_of_ships\n",
    "    global ship_positions\n",
    " \n",
    "    random.seed(time.time())\n",
    " \n",
    "    rows, cols = (grid_size, grid_size)\n",
    " \n",
    "    grid = []\n",
    "    for r in range(rows):\n",
    "        row = []\n",
    "        for c in range(cols):\n",
    "            row.append(\".\")\n",
    "        grid.append(row)\n",
    " \n",
    "    num_of_ships_placed = 0\n",
    " \n",
    "    ship_positions = []\n",
    " \n",
    "    while num_of_ships_placed != num_of_ships:\n",
    "        random_row = random.randint(0, rows - 1)\n",
    "        random_col = random.randint(0, cols - 1)\n",
    "        direction = random.choice([\"left\", \"right\", \"up\", \"down\"])\n",
    "        ship_size = [2, 3, 3, 4, 5]\n",
    "        index = 0\n",
    "        if try_to_place_ship_on_grid(random_row, random_col, direction, ship_size[index]):\n",
    "            num_of_ships_placed += 1\n",
    "            index += 1\n",
    " \n",
    " \n",
    "def print_grid():\n",
    "    \"\"\"Will print the grid with rows A-J and columns 0-9\"\"\"\n",
    "    global grid\n",
    "    global alphabet\n",
    " \n",
    "    debug_mode = True\n",
    " \n",
    "    alphabet = alphabet[0: len(grid) + 1]\n",
    " \n",
    "    for row in range(len(grid)):\n",
    "        print(alphabet[row], end=\") \")\n",
    "        for col in range(len(grid[row])):\n",
    "            if grid[row][col] == \"O\":\n",
    "                if debug_mode:\n",
    "                    print(\".\", end=\" \")\n",
    "                else:\n",
    "                    print(\".\", end=\" \")\n",
    "            else:\n",
    "                print(grid[row][col], end=\" \")\n",
    "        print(\"\")\n",
    " \n",
    "    print(\"  \", end=\" \")\n",
    "    for i in range(len(grid[0])):\n",
    "        print(str(i), end=\" \")\n",
    "    print(\"\")\n",
    " \n",
    " \n",
    "def accept_valid_bullet_placement():\n",
    "    \"\"\"Will get valid row and column to place bullet shot\"\"\"\n",
    "    global alphabet\n",
    "    global grid\n",
    " \n",
    "    is_valid_placement = False\n",
    "    row = -1\n",
    "    col = -1\n",
    "    while is_valid_placement is False:\n",
    "        placement = input(\"Enter row (A-J) and column (0-9) such as A3: \")\n",
    "        placement = placement.upper()\n",
    "        if len(placement) <= 0 or len(placement) > 2:\n",
    "            print(\"Error: Please enter only one row and column such as A3\")\n",
    "            continue\n",
    "        row = placement[0]\n",
    "        col = placement[1]\n",
    "        if not row.isalpha() or not col.isnumeric():\n",
    "            print(\"Error: Please enter letter (A-J) for row and (0-9) for column\")\n",
    "            continue\n",
    "        row = alphabet.find(row)\n",
    "        if not (-1 < row < grid_size):\n",
    "            print(\"Error: Please enter letter (A-J) for row and (0-9) for column\")\n",
    "            continue\n",
    "        col = int(col)\n",
    "        if not (-1 < col < grid_size):\n",
    "            print(\"Error: Please enter letter (A-J) for row and (0-9) for column\")\n",
    "            continue\n",
    "        if grid[row][col] == \"#\" or grid[row][col] == \"X\":\n",
    "            print(\"You have already shot a bullet here, pick somewhere else\")\n",
    "            continue\n",
    "        if grid[row][col] == \".\" or grid[row][col] == \"O\":\n",
    "            is_valid_placement = True\n",
    " \n",
    "    return row, col\n",
    " \n",
    " \n",
    "def check_for_ship_sunk(row, col):\n",
    "    \"\"\"If all parts of a shit have been shot it is sunk and we later increment ships sunk\"\"\"\n",
    "    global ship_positions\n",
    "    global grid\n",
    " \n",
    "    for position in ship_positions:\n",
    "        start_row = position[0]\n",
    "        end_row = position[1]\n",
    "        start_col = position[2]\n",
    "        end_col = position[3]\n",
    "        if start_row <= row <= end_row and start_col <= col <= end_col:\n",
    "            # Ship found, now check if its all sunk\n",
    "            for r in range(start_row, end_row):\n",
    "                for c in range(start_col, end_col):\n",
    "                    if grid[r][c] != \"X\":\n",
    "                        return False\n",
    "    return True\n",
    " \n",
    " \n",
    "def shoot_bullet():\n",
    "    \"\"\"Updates grid and ships based on where the bullet was shot\"\"\"\n",
    "    global grid\n",
    "    global num_of_ships_sunk\n",
    "    global bullets_left\n",
    " \n",
    "    row, col = accept_valid_bullet_placement()\n",
    "    print(\"\")\n",
    "    print(\"----------------------------\")\n",
    " \n",
    "    if grid[row][col] == \".\":\n",
    "        print(\"You missed, no ship was shot\")\n",
    "        grid[row][col] = \"#\"\n",
    "    elif grid[row][col] == \"O\":\n",
    "        print(\"You hit!\", end=\" \")\n",
    "        grid[row][col] = \"X\"\n",
    "        if check_for_ship_sunk(row, col):\n",
    "            print(\"A ship was completely sunk!\")\n",
    "            num_of_ships_sunk += 1\n",
    "        else:\n",
    "            print(\"A ship was shot\")\n",
    " \n",
    "    bullets_left -= 1\n",
    " \n",
    " \n",
    "def check_for_game_over():\n",
    "    \"\"\"If all ships have been sunk or we run out of bullets its game over\"\"\"\n",
    "    global num_of_ships_sunk\n",
    "    global num_of_ships\n",
    "    global bullets_left\n",
    "    global game_over\n",
    " \n",
    "    if num_of_ships == num_of_ships_sunk:\n",
    "        print(\"Congrats you won!\")\n",
    "        game_over = True\n",
    "    elif bullets_left <= 0:\n",
    "        print(\"Sorry, you lost! You ran out of bullets, try again next time!\")\n",
    "        game_over = True\n",
    " \n",
    " \n",
    "def main():\n",
    "    \"\"\"Main entry point of application that runs the game loop\"\"\"\n",
    "    global game_over\n",
    " \n",
    "    print(\"-----Welcome to Battleships-----\")\n",
    "    print(\"You have 50 bullets to take down 8 ships, may the battle begin!\")\n",
    " \n",
    "    create_grid()\n",
    " \n",
    "    while game_over is False:\n",
    "        print_grid()\n",
    "        print(\"Number of ships remaining: \" + str(num_of_ships - num_of_ships_sunk))\n",
    "        print(\"Number of bullets left: \" + str(bullets_left))\n",
    "        shoot_bullet()\n",
    "        print(\"----------------------------\")\n",
    "        print(\"\")\n",
    "        check_for_game_over()\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    \"\"\"Will only be called when program is run from terminal or an IDE like PyCharms\"\"\"\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13b1b2a7-1b71-4895-a4dc-7bf1aedfcc59",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
